#!/bin/sh
set -e

USE_COMPACT=y
USE_COMPACT=

BUILD_COMPACT=$USE_COMPACT

WORKDIR=/var/lib/siren/.work

mkdir -p $WORKDIR

function mount_f {
	what=$1
	where=$2
	type=$3
	options=$4

	echo "mount -t $type -o$options $what $where"
	#mount -t $type -o$options $what $where

	sdname=$(systemd-escape -p $where || true)
	sdfile="[Mount]\nWhat=$what\nWhere=$where\nType=$type\nOptions=$options\n"
	sdauto="[Automount]\nWhere=$where\n\n[Install]\nWantedBy=local-fs.target\n"

	printf "$sdfile" > /etc/systemd/system/$sdname.mount
	printf "$sdauto" > /etc/systemd/system/$sdname.automount
	systemctl daemon-reload
	systemctl enable --now "$sdname.automount"
	systemctl restart "$sdname.mount"
}

function mount_overlay {
	_what_ro=$1
	_what_rw=$2
	_where=$3

	if [ -n "$_what_rw" ]
	then
		if [ -n "$_what_ro" ]
		then
			mount_f overlay $_where overlay lowerdir=$_what_ro,upperdir=$_what_rw,workdir=$WORKDIR
		else
			mount_f $_what_rw $_where none bind
		fi
	else
		if [[ $_what_ro == *":"* ]]
		then
			mount_f overlay $_where overlay lowerdir=$_what_ro
		else
			mount_f $_what_ro $_where none bind,ro # Note: ro probably doesnt' work
		fi
	fi
}

function umount_f {
	where=$1

	sdname=$(systemd-escape -p $where || true)

	systemctl stop $sdname.mount
}

function _mount {
	_base=$1
	_cont=$2

	echo "BASE: $_base"
	echo "CONT: $_cont"

	if [ -n "$_cont" ]
	then
		_id=$_cont
	else
		_id=$_base
	fi

	_sroot=/var/lib/siren/$_id
	_root=/var/lib/machines/$_id

	mkdir -p $_sroot $_root

	if [ -n "$_base" ]
	then
		if [ -n "$USE_COMPACT" ]
		then
			_what_ro=/var/lib/siren/$_base.compact
		else
			_what_ro=$(cat /var/lib/siren/$_base/overlay)
			_what_ro=/var/lib/siren/${_what_ro//:/:\/var\/lib\/siren\/}
		fi
	else
		_what_ro=""
	fi

	if [ -n "$_cont" ]
	then
		_what_rw=/var/lib/siren/$_cont
	else
		_what_rw=""
	fi

	if [ -n "$_what_ro$_what_rw" ]
	then
		mount_overlay "$_what_ro" "$_what_rw" $_root
	else
		echo "You need a base or a container name."
		exit 1
	fi
}

if [ $(basename "$0") = "siren" ]
then
	if [ -n "$1" ]
	then
		case "$1" in
			build)
				if [ -n "$2" ]
				then
					path=$2
				else
					path="."
				fi
				$path/build.sh
				exit $? ;;
			tag)
				rm -f /var/lib/siren/$3
				ln -s $2 /var/lib/siren/$3
				rm -f /var/lib/machines/$3
				ln -s $2 /var/lib/machines/$3
				if [ -n "$BUILD_COMPACT" ]
				then
					rm -f /var/lib/siren/$3.compact
					ln -s $2.compact /var/lib/siren/$3.compact
					rm -f /var/lib/machines/$3.compact
					ln -s $2.compact /var/lib/machines/$3.compact
				fi
				exit 0 ;;
			new) # New container
				_id=$2
				_base=$3
				_mount "$_base" "$_id"
				exit 0 ;;
		esac
	fi
	echo "Usage: $0 build/tag/new"
	exit 1
fi

src=$( cd "$( dirname "$0" )" && pwd )
cd $src

id=""
base=""

function ID {
	name=$1
	version=$2

	id=$name-$version
	root=/var/lib/machines/$id
	sroot=/var/lib/siren/$id

	mkdir -m 0755 -p $root

	__mount
}

function FROM {
	base=$1
	if [ ! -d /var/lib/siren/$base ]
	then
		echo "Base not found: $base"
		exit 1
	fi
	base_overlay=$(cat /var/lib/siren/$base/overlay)
	base_version=$(cat /var/lib/siren/$base/version)

	# Enable ID <-> FROM reversal
	if [ -n "$id" ]
	then
		__mount
	fi
}

function RUN {
	systemd-nspawn -M $id $@
}

function ENABLE {
	RUN systemctl enable $1
}

storeargs() {
	printf "%q " "$@"
}

function SET {
	echo $2 > $root/$1
}

function CMD {
	storeargs exec "$@" > $root/run.sh
	chmod u+x $root/run.sh
}

function __cleanup_systemd {
	if [ "$(ls -A $sroot/etc/systemd/system 2>/dev/null || true)" ]
	then
		cp -r $sroot/etc/systemd/system/* $sroot/usr/lib/systemd/system/
		rm -rf $sroot/etc/systemd/system
	fi
}

function __mount {
	_mount "$base" "$id"
}

function __umount {
	umount_f "$root"
}

function __compact {
	rm -rf $sroot.compact

	if [ -n "$base" ]
	then
		mkdir -p $sroot.compact
		cp -r --reflink /var/lib/siren/$base.compact/* $sroot.compact
		cp -r --reflink $sroot/* $sroot.compact
	else
		ln -s $id $sroot.compact
	fi
}

function __save_settings {
	echo $version > $sroot/version
	if [ -n "$base" ]
	then
		echo $base_overlay:$id > $sroot/overlay
	else
		echo $id > $sroot/overlay
	fi
}

function __atEXIT {
	__umount
	__cleanup_systemd
	__save_settings
	if [ -n "$BUILD_COMPACT" ]
	then
		__compact
	fi
}

trap __atEXIT EXIT
