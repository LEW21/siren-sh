#!/bin/sh
set -e

USE_COMPACT=y
USE_COMPACT=

BUILD_COMPACT=$USE_COMPACT

mkdir -p /var/lib/siren/.work

function _mount {
	_base=$1
	_cont=$2

	echo "BASE: $_base"
	echo "CONT: $_cont"

	if [ -n "$_cont" ]
	then
		_id=$_cont
	else
		_id=$_base
	fi

	_root=/var/lib/machines/$_id

	cd /var/lib/siren
	mkdir -p $_id
	mkdir -p /var/lib/machines/$_id

	if [ -n "$_base" ]
	then
		_base_overlay=$(cat /var/lib/siren/$_base/overlay)
		if [ -n "$_cont" ]
		then
			if [ -n "$USE_COMPACT" ]
			then
				mount -t overlay overlay -olowerdir=$_base.compact,upperdir=$_id,workdir=.work $_root
			else
				echo "mount -t overlay overlay -olowerdir=$_base_overlay,upperdir=$_id,workdir=.work $_root"
				mount -t overlay overlay -olowerdir=$_base_overlay,upperdir=$_id,workdir=.work $_root
			fi
		else
			if [ -n "$USE_COMPACT" ]
			then
				mount -B $_base.compact $_id && mount -o remount,ro $_root
			else
				# TODO check for : in $base_overlay, and use mount -B if there is none.
				echo "mount -t overlay overlay -olowerdir=$_base_overlay $_root"
				mount -t overlay overlay -olowerdir=$_base_overlay $_root
			fi
		fi
	else
		if [ -n "$_cont" ]
		then
			mount -B $_id $_root
		else
			echo "You need a base or a container name."
			exit 1
		fi
	fi
}

if [ $(basename "$0") = "siren" ]
then
	if [ -n "$1" ]
	then
		case "$1" in
			build)
				if [ -n "$2" ]
				then
					path=$2
				else
					path="."
				fi
				$path/build.sh
				exit $? ;;
			tag)
				ln -s $2 /var/lib/siren/$3
				if [ -n "$BUILD_COMPACT" ]
				then
					ln -s $2.compact /var/lib/siren/$3.compact
				fi
				exit 0 ;;
			mount)
				_mount "$2" "$3"

				exit 0 ;;
			umount)
				umount /var/lib/machines/$2
				exit 0 ;;
		esac
	fi
	echo "Usage: $0 build/tag/mount/umount"
	exit 1
fi

src=$( cd "$( dirname "$0" )" && pwd )
cd $src

id=""
base=""

function ID {
	name=$1
	version=$2

	id=$name-$version
	root=/var/lib/machines/$id
	sroot=/var/lib/siren/$id

	mkdir -m 0755 -p $root

	__mount
}

function FROM {
	base=$1
	if [ ! -d /var/lib/siren/$base ]
	then
		echo "Base not found: $base"
		exit 1
	fi
	base_overlay=$(cat /var/lib/siren/$base/overlay)
	base_version=$(cat /var/lib/siren/$base/version)

	# Enable ID <-> FROM reversal
	if [ -n "$id" ]
	then
		__mount
	fi
}

function RUN {
	systemd-nspawn -M $id $@
}

function ENABLE {
	RUN systemctl enable $1
}

storeargs() {
	printf "%q " "$@"
}

function SET {
	echo $2 > $root/$1
}

function CMD {
	storeargs exec "$@" > $root/run.sh
	chmod u+x $root/run.sh
}

function __cleanup_systemd {
	if [ "$(ls -A $sroot/etc/systemd/system || true)" ]
	then
		cp -r $sroot/etc/systemd/system/* $sroot/usr/lib/systemd/system/
		rm -rf $sroot/etc/systemd/system
	fi
}

function __mount {
	__umount

	_mount "$base" "$id"

	cd $src
}

function __umount {
	if (mount | grep " on $root type ")
	then
		umount $root
	fi
}

function __compact {
	rm -rf $sroot.compact

	if [ -n "$base" ]
	then
		mkdir -p $sroot.compact
		cp -r --reflink /var/lib/siren/$base.compact/* $sroot.compact
		cp -r --reflink $sroot/* $sroot.compact
	else
		ln -s $id $sroot.compact
	fi
}

function __save_settings {
	echo $version > $sroot/version
	if [ -n "$base" ]
	then
		echo $base_overlay:$id > $sroot/overlay
	else
		echo $id > $sroot/overlay
	fi
}

function __atEXIT {
	__umount
	__cleanup_systemd
	__save_settings
	if [ -n "$BUILD_COMPACT" ]
	then
		__compact
	fi
}

trap __atEXIT EXIT
